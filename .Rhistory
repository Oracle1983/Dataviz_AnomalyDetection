# list(range = c(~min(T_MET),~max(T_MET)),
# label = 'T_MET', values = ~T_MET),
# list(range = c(~min(TAT),~max(TAT)),
# label = 'TAT', values = ~TAT),
# list(range = c(~min(TAT_LPT),~max(TAT_LPT)),
# label = 'TAT_LPT', values = ~TAT_LPT),
# list(range = c(~min(TEMP_DIFF),~max(TEMP_DIFF)),
# label = 'TEMP_DIFF', values = ~TEMP_DIFF),
# list(range = c(~min(TIT),~max(TIT)),
# label = 'TIT', values = ~TIT))
# )
getwd()
setwd("C:/Users/Kum Hong Tham/Documents/SMU_WIP/Viz project")
packages <- c('shiny','semantic.dashboard', 'plotly','tidyverse','PerformanceAnalytics',
'latticeExtra','openair','DataCombine')
for (p in packages) {
if(!require(p, character.only = T)) {
install.packages(p)
}
library(p, character.only = T)
}
options(shiny.maxRequestSize = 30*1024^2)
# Load processed data (for choices under selectInput)
hourly <- read_csv("./data/hourly.csv")
per_hour <- read_csv("./data/per_hour.csv")
# Extract time range (for min and max under sliderInput)
#mindate = as.Date("2007-07-01 00:00:00","%Y-%m-%d %H:%M:%S")
#maxdate = as.Date("2007-08-01 00:00:00","%Y-%m-%d %H:%M:%S")
mindate = min(hourly$date, na.rm = TRUE)
maxdate = max(hourly$date, na.rm = TRUE)
ui <- dashboardPage(
##############################################
# Header-start                               #
##############################################
dashboardHeader(titlePanel(title=div(img(height = 150, width = 1850, src="g11_title_block.png"))),
color = 'black', inverted = TRUE
),
##############################################
# Sidebar-start                              #
##############################################
dashboardSidebar(size = "thin", color = "teal",
sidebarMenu(
menuItem(tabName = "overview", "Overview", icon=icon("clipboard outline")),
menuItem(tabName = "parallelplot", "Parallel Plot", icon=icon("chart bar outline")),
menuItem(tabName = "horizongraph", "Horizon Graph",icon=icon("chart area")),
menuItem(tabName = "controlchart", "Control Chart",icon=icon("chart line"))
)
),
##############################################
# Body-start                                 #
##############################################
dashboardBody(
tabItems(
selected = 1,
##########################################
############# overview-start #############
##########################################
tabItem(
tabName = "overview",
fluidRow(
h1("Overview")
)
),
##########################################
########### parallelplot-start ###########
##########################################
tabItem(
tabName = "parallelplot",
fluidRow(
#h1("Parallel Plot"),
column(3,
box(
selectInput(
inputId = 'hFunSys_item_pc',
label = 'Function System:',
choices = unique(as.vector(per_hour['FunSys_item'])),
selected = '01',
multiple = FALSE,
selectize = TRUE),
# selectInput(
#   inputId = 'hUnit_pc',
#   label = 'Unit:',
#   choices = unique(as.vector(hourly['Unit'])),
#   selected = 'degC',
#   multiple = FALSE,
#   selectize = TRUE),
width = 3,
title = "Selection of Sensor Groups",
color = "teal", ribbon = TRUE, title_side = "top left"
)
),
column(12,
box(
splitLayout(
cellArgs = list(style = "padding-left:45px;padding-bottom:7px;"),
sliderInput("hsliderDate_pc", 'Range of dates:',
mindate,
maxdate,
c(mindate, maxdate),
step = 300)
),
splitLayout(
cellArgs = list(style = "padding:0px;padding-bottom:0px;"),
selectInput(
inputId="hinputDate_start_pc",
label = HTML("Exclude date from:"),
choices = c('select...'='NULL',unique(as.vector(per_hour['date']))),
selected = NULL,
multiple = FALSE,
selectize = FALSE,
width=200),
selectInput(
inputId="hinputDate_end_pc",
label = HTML("to:"),
choices = c('select...'='NULL',unique(as.vector(per_hour['date']))),
selected = NULL,
multiple = FALSE,
selectize = FALSE,
width=200),
selectInput(
inputId = 'hinterval_pc',
label = 'Time Interval:',
choices = '*',
multiple = FALSE,
selectize = FALSE,
width=100)
),
width = 12,
title = "Other Settings",
color = "teal", ribbon = TRUE, title_side = "top left"
)
),
column(width = 16,
plotlyOutput("parallelplot", height=650)
)
)
),
##########################################
########### horizongraph-start ###########
##########################################
tabItem(
tabName = "horizongraph",
fluidRow(
#h1("Horizon Graph"),
column(3,
box(
selectInput(
inputId = 'hFunSys_item',
label = 'Function System:',
choices = unique(as.vector(hourly['FunSys_item'])),
selected = '01',
multiple = FALSE,
selectize = TRUE),
selectInput(
inputId = 'hUnit',
label = 'Unit:',
choices = unique(as.vector(hourly['Unit'])),
selected = 'degC',
multiple = FALSE,
selectize = TRUE),
width = 3,
title = "Selection of Sensor Groups",
color = "teal", ribbon = TRUE, title_side = "top left"
)
),
column(12,
box(
splitLayout(
cellArgs = list(style = "padding-left:45px;padding-bottom:7px;"),
sliderInput("hsliderDate", 'Range of dates:',
mindate,
maxdate,
c(mindate, maxdate),
step = 300),
sliderInput("hsliderScale", 'Horizon Color Scale:',
0,
10,
0.1)
),
splitLayout(
cellArgs = list(style = "padding:0px;padding-bottom:0px;"),
selectInput(
inputId="hinputDate_start",
label = HTML("Exclude date from:"),
choices = c('select...'='NULL',unique(as.vector(hourly['date']))),
selected = NULL,
multiple = FALSE,
selectize = FALSE,
width=200),
selectInput(
inputId="hinputDate_end",
label = HTML("to:"),
choices = c('select...'='NULL',unique(as.vector(hourly['date']))),
selected = NULL,
multiple = FALSE,
selectize = FALSE,
width=200),
selectInput(
inputId = 'hinterval',
label = 'Time Interval:',
choices = '*',
multiple = FALSE,
selectize = FALSE,
width=100)
),
width = 12,
title = "Other Settings",
color = "teal", ribbon = TRUE, title_side = "top left"
)
),
column(width = 16,
plotOutput("horizonplot", height=650)
)
)
),
##########################################
########### controlchart-start ###########
##########################################
tabItem(
tabName = "controlchart",
fluidRow(
h1("Control Chart")
)
)
)
)
)
##########################################
server <- shinyServer(function(input, output, session) {
#################################################################
# [Parallel Plot]                                               #
#################################################################
# Select time interval
observe({
#files <- list.files(path='data/')
updateSelectizeInput(session = session,
inputId = 'hinterval_pc',
choices = c('Every 5 mins'='per_5min.csv',
'Every hour'='per_hour.csv',
'Every day'='per_day.csv'
),
select = 'per_hour.csv')
})
output$parallelplot <- renderPlotly({
data  <- read_csv(sprintf("data/%s",input$hinterval_pc))
# Aggregate time
incl_start <- input$hsliderDate_pc[1]
incl_end <- input$hsliderDate_pc[2]
excl_start <- input$hinputDate_start_pc
excl_end <- input$hinputDate_end_pc
## check input for exclude dates
if(input$hinputDate_start_pc == 'NULL' | input$hinputDate_end_pc == 'NULL') {
data <- data[data$date > incl_start & data$date <= incl_end,]
}
else{
data <- data[data$date > incl_start & data$date <= incl_end,]
data <- data[!(data$date > excl_start & data$date <= excl_end),]
}
data <- data[data$FunSys_item==input$hFunSys_item_pc,]
plot_ly(data, type = 'parcoords',
dimensions = list(
list(range = c(~min(X1_ave),~max(X1_ave)),
label = 'X1_ave', values = ~X1_ave),
list(range = c(~min(X1_DC),~max(X1_DC)),
label = 'X1_DC', values = ~X1_DC),
list(range = c(~min(X1_max),~max(X1_max)),
label = 'X1_max', values = ~X1_max),
list(range = c(~min(X1_min),~max(X1_min)),
label = 'X1_min', values = ~X1_min),
list(range = c(~min(X2_ave),~max(X2_ave)),
label = 'X2_ave', values = ~X2_ave),
list(range = c(~min(X2_DC),~max(X2_DC)),
label = 'X2_DC', values = ~X2_DC),
list(range = c(~min(X2_R1_ave),~max(X2_R1_ave)),
label = 'X2_R1_ave', values = ~X2_R1_ave),
list(range = c(~min(X2_R1_max),~max(X2_R1_max)),
label = 'X2_R1_max', values = ~X2_R1_max),
list(range = c(~min(X2_R2_ave),~max(X2_R2_ave)),
label = 'X2_R2_ave', values = ~X2_R2_ave),
list(range = c(~min(X2_R2_max),~max(X2_R2_max)),
label = 'X2_R2_max', values = ~X2_R2_max),
list(range = c(~min(X2_R3_ave),~max(X2_R3_ave)),
label = 'X2_R3_ave', values = ~X2_R3_ave),
list(range = c(~min(X2_R3_max),~max(X2_R3_max)),
label = 'X2_R3_max', values = ~X2_R3_max),
list(range = c(~min(BOT),~max(BOT)),
label = 'BOT', values = ~BOT),
list(range = c(~min(MBA01),~max(MBA01)),
label = 'MBA01', values = ~MBA01),
list(range = c(~min(MBA0GD020),~max(MBA0GD020)),
label = 'MBA0GD020', values = ~MBA0GD020),
list(range = c(~min(MBA0GD040),~max(MBA0GD040)),
label = 'MBA0GD040', values = ~MBA0GD040),
list(range = c(~min(MBA0GD070),~max(MBA0GD070)),
label = 'MBA0GD070', values = ~MBA0GD070),
list(range = c(~min(MBA0GD080),~max(MBA0GD080)),
label = 'MBA0GD080', values = ~MBA0GD080),
list(range = c(~min(TIT1),~max(TIT1)),
label = 'TIT1', values = ~TIT1),
list(range = c(~min(TIT2),~max(TIT2)),
label = 'TIT2', values = ~TIT2),
list(range = c(~min(TOP),~max(TOP)),
label = 'TOP', values = ~TOP),
list(range = c(~min(X.NA.),~max(X.NA.)),
label = 'X.NA.', values = ~X.NA.)
)
)
# trace1 <- per_hour %>%
# filter(FunSys_item == input$hFunSys_item_pc) %>%
# list(
#   line = list(color = "rgba(31,119,180,1"),
#   type = 'parcoords',
#   dimensions = list(
#         list(range = c(~min(data$X1_ave),~max(data$X1_ave)),
#              label = 'X1_ave', values = ~data$X1_ave),
#         list(range = c(min(data$X1_DC),max(data$X1_DC)),
#              label = 'X1_DC', values = data$X1_DC),
#         list(range = c(min(data$X1_max),max(data$X1_max)),
#              label = 'X1_max', values = data$X1_max),
#         list(range = c(min(data$X1_min),max(data$X1_min)),
#              label = 'X1_min', values = data$X1_min),
#         list(range = c(min(data$X2_ave),max(data$X2_ave)),
#              label = 'X2_ave', values = data$X2_ave),
#         list(range = c(min(data$X2_DC),max(data$X2_DC)),
#              label = 'X2_DC', values = data$X2_DC),
#         list(range = c(min(data$X2_R1_ave),max(data$X2_R1_ave)),
#              label = 'X2_R1_ave', values = data$X2_R1_ave),
#         list(range = c(min(data$X2_R1_max),max(data$X2_R1_max)),
#              label = 'X2_R1_max', values = data$X2_R1_max),
#         list(range = c(min(data$X2_R2_ave),max(data$X2_R2_ave)),
#              label = 'X2_R2_ave', values = data$X2_R2_ave),
#         list(range = c(min(data$X2_R2_max),max(data$X2_R2_max)),
#              label = 'X2_R2_max', values = data$X2_R2_max),
#         list(range = c(min(data$X2_R3_ave),max(data$X2_R3_ave)),
#              label = 'X2_R3_ave', values = data$X2_R3_ave),
#         list(range = c(min(data$X2_R3_max),max(data$X2_R3_max)),
#              label = 'X2_R3_max', values = data$X2_R3_max),
#         list(range = c(min(data$BOT),max(data$BOT)),
#              label = 'BOT', values = data$BOT),
#         list(range = c(min(data$MBA01),max(data$MBA01)),
#              label = 'MBA01', values = data$MBA01),
#         list(range = c(min(data$MBA0GD020),max(data$MBA0GD020)),
#              label = 'MBA0GD020', values = data$MBA0GD020),
#         list(range = c(min(data$MBA0GD040),max(data$MBA0GD040)),
#              label = 'MBA0GD040', values = data$MBA0GD040),
#         list(range = c(min(data$MBA0GD070),max(data$MBA0GD070)),
#              label = 'MBA0GD070', values = data$MBA0GD070),
#         list(range = c(min(data$MBA0GD080),max(data$MBA0GD080)),
#              label = 'MBA0GD080', values = data$MBA0GD080),
#         list(range = c(min(data$TIT1),max(data$TIT1)),
#              label = 'TIT1', values = data$TIT1),
#         list(range = c(min(data$TIT2),max(data$TIT2)),
#              label = 'TIT2', values = data$TIT2),
#         list(range = c(min(data$TOP),max(data$TOP)),
#              label = 'TOP', values = data$TOP),
#         list(range = c(min(data$X.NA.),max(data$X.NA.)),
#              label = 'X.NA.', values = data$X.NA.)
#       )
# )
# layout <- list(
#   margin = list(
#     b = 40,
#     l = 60,
#     r = 10
#   ),
#   hovermode = "closest",
#   showlegend = FALSE
# )
# p <- plot_ly()
# p <- add_trace(p, line=trace1$line, type=trace1$type, frame=trace1$frame, dimensions=trace1$dimensions)
# p <- layout(p, margin=layout$margin, hovermode=layout$hovermode, showlegend=layout$showlegend)
})
#################################################################
# [Horizon Chart]                                               #
#################################################################
# Select time interval
observe({
#files <- list.files(path='data/')
updateSelectizeInput(session = session,
inputId = 'hinterval',
choices = c('Every 5 mins'='five_min.csv',
'Every hour'='hourly.csv',
'Every day'='daily.csv'
),
select = 'hourly.csv')
})
# Plotting
output$horizonplot <- renderPlot({
hdata <- read_csv(sprintf("data/%s",input$hinterval))
hdata <- as.data.frame(hdata)
# Select by FunSys_item and Unit
hdata <- hdata[hdata$Unit==input$hUnit,]
hdata <- hdata[hdata$FunSys_item==input$hFunSys_item,]
# Select required columns
hdata <- select(hdata, date, ID, Value)
# Replace null under Value column with zero
#hdata$Value[is.na(hdata$Value)] <- 0
# Calculate percentage of changes
hdata <- change(hdata, Var = 'Value', GroupVar = 'ID',
type = 'percent',
NewVar = 'PercentChange',
slideBy = -1)
# Spreads into multiple columns
## assign row_number (remove Value if percentage of changes exist)
hdata <- hdata %>%
group_by(ID) %>%
mutate(grouped_id = row_number()) %>%
select(-Value)
## spread and remove grouped_id
hdata <- hdata %>%
spread(ID, PercentChange) %>%
select(-grouped_id)
# Aggregate time
incl_start <- input$hsliderDate[1]
incl_end <- input$hsliderDate[2]
excl_start <- input$hinputDate_start
excl_end <- input$hinputDate_end
## check input for exclude dates
if(input$hinputDate_start == 'NULL' | input$hinputDate_end == 'NULL') {
hdata <- hdata[hdata$date > incl_start & hdata$date <= incl_end,]
}
else{
hdata <- hdata[hdata$date > incl_start & hdata$date <= incl_end,]
hdata <- hdata[!(hdata$date > excl_start & hdata$date <= excl_end),]
}
# Moving average
#n=3
#df07_2s <- df07_2s %>%
#  mutate_all(funs(rollapplyr(., FUN = mean, width = n, fill = NA, partial = TRUE)))
# Convert dataframe to xts
hdata <- as.xts(hdata[,-1], order.by=as.POSIXct(hdata$date,format='%Y-%m-%d %H:%M:%S'))
# Plot horizon chart
horizonplot(hdata,
#specifying scale of each color segment
horizonscale = input$hsliderScale,
#specifying baseline y value for the first (positive) segment (i.e. the value at which red changes to blue)
#origin = 0,
#setting color scale bar
colorkey = TRUE,
#standard horizon and setting horizontal white grid lines
panel = function(x, ...) {
panel.horizonplot(x, ...)
#h = 3 (3 horizontal grid lines)
#v = 0 (no vertical grid lines)
panel.grid(h=3, v=0,col = "gray70", lwd=1,lty = 3)
},
#setting panel border
par.settings=theEconomist.theme(box = "gray70"),
#setting the strip to left
strip.left = FALSE,
#setting number of columns and rows
layout = c(1,ncol(hdata)),
#setting ticks and axis
scales = list(tck = c(1,0), y = list(tck = c(0,1), draw = TRUE, relation = "same", alternating = 2)),
#setting labels
xlab = NULL,
ylab = list(rev(colnames(hdata)), rot = 0, cex = 0.8, pos = 3),
main = NULL)
})
#################################################################
# [Control Chart]                                               #
#################################################################
#output$parallelplot <- renderPlot({
#})
})
shinyApp(ui, server)
setwd("C:/Users/Kum Hong Tham/Documents/SMU_WIP/Viz project")
---
title: "Immigration Clearance Distribution "
output: html_notebook
---
```{r}
#library(rBeta2009)
set.seed(5)
#ave clearance time for SG = 1.5min
SG <- rgamma(10000, shape=2.5, rate = 1/1)
hist(SG)
#ave clearance time for UAE = 1.5; ave time computed based on country score
UAE <- rgamma(10000, shape=3, rate = 1/1.5)
hist(UAE)
#ave clearance time for Yeman = 2.196
YEMAN <- rgamma(10000, shape=3, rate = 1/2.196)
hist(YEMAN)
ls
install.packages('rsconnect')
rsconnect::setAccountInfo(name='oracle1983',
token='B0916742B69689661F7535489A5DCA31',
secret='hNTasTVySgwqyaJVyHvfq1LBmwZ+5LiYjbHw4GEB')
library(rsconnect)
getwd()
rsconnect::deployApp("./Kelvin/SMU_WIP/Viz project/Dataviz_AnomalyDetection/")
rsconnect::deployApp("C:/Users/Kum Hong Tham/Documents/Kelvin/SMU_WIP/Viz project/Dataviz_AnomalyDetection/")
rsconnect::deployApp("C:\Users\Kum Hong Tham\Documents\Kelvin\SMU_WIP\Viz project\Dataviz_AnomalyDetection")
rsconnect::deployApp("C:/Users/Kum Hong Tham/Documents/Kelvin/SMU_WIP/Viz project/Dataviz_AnomalyDetection")
sudo
library(semantic.dashboard, lib.loc="/opt/R/3.6.0/lib/R/library")
setwd("C:/Users/Kum Hong Tham/Documents/Kelvin/SMU_WIP/Viz project/Dataviz_AnomalyDetection/")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?colorbar
runApp()
runApp()
runApp()
runApp()
deployApp()
