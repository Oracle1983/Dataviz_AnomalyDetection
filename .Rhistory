#   BOT = mean(BOT, na.rm = T),
#   MBA01 = mean(MBA01, na.rm = T),
#   MBA0GD020 = mean(MBA01GD020, na.rm = T),
#   MBA0GD040 = mean(MBA01GD040, na.rm = T),
#   MBA0GD070 = mean(MBA01GD070, na.rm = T),
#   MBA0GD080 = mean(MBA01GD080, na.rm = T),
#   TIT1 = mean(TIT1, na.rm = T),
#   TIT2 = mean(TIT2, na.rm = T),
#   TOP = mean(TOP, na.rm = T),
#   X.NA. = mean(X.NA., na.rm = T)
# )
#
# per_hour = group_by(data_pc_hourly, date, FunSys_item) %>% summarize(
#   X1_ave = mean(X1_ave, na.rm = T),
#   X1_DC = mean(X1_DC, na.rm = T),
#   X1_max = mean(X1_max, na.rm = T),
#   X1_min = mean(X1_min, na.rm = T),
#   X2_ave = mean(X2_ave, na.rm = T),
#   X2_DC = mean(X2_DC, na.rm = T),
#   X2_R1_ave = mean(X2_R1_ave, na.rm = T),
#   X2_R1_max = mean(X2_R1_max, na.rm = T),
#   X2_R2_ave = mean(X2_R2_ave, na.rm = T),
#   X2_R2_max = mean(X2_R2_max, na.rm = T),
#   X2_R3_ave = mean(X2_R3_ave, na.rm = T),
#   X2_R3_max = mean(X2_R3_max, na.rm = T),
#   BOT = mean(BOT, na.rm = T),
#   MBA01 = mean(MBA01, na.rm = T),
#   MBA0GD020 = mean(MBA01GD020, na.rm = T),
#   MBA0GD040 = mean(MBA01GD040, na.rm = T),
#   MBA0GD070 = mean(MBA01GD070, na.rm = T),
#   MBA0GD080 = mean(MBA01GD080, na.rm = T),
#   TIT1 = mean(TIT1, na.rm = T),
#   TIT2 = mean(TIT2, na.rm = T),
#   TOP = mean(TOP, na.rm = T),
#   X.NA. = mean(X.NA., na.rm = T)
# )
#
# per_5min = group_by(data_pc_5min, date, FunSys_item) %>% summarize(
#   X1_ave = mean(X1_ave, na.rm = T),
#   X1_DC = mean(X1_DC, na.rm = T),
#   X1_max = mean(X1_max, na.rm = T),
#   X1_min = mean(X1_min, na.rm = T),
#   X2_ave = mean(X2_ave, na.rm = T),
#   X2_DC = mean(X2_DC, na.rm = T),
#   X2_R1_ave = mean(X2_R1_ave, na.rm = T),
#   X2_R1_max = mean(X2_R1_max, na.rm = T),
#   X2_R2_ave = mean(X2_R2_ave, na.rm = T),
#   X2_R2_max = mean(X2_R2_max, na.rm = T),
#   X2_R3_ave = mean(X2_R3_ave, na.rm = T),
#   X2_R3_max = mean(X2_R3_max, na.rm = T),
#   BOT = mean(BOT, na.rm = T),
#   MBA01 = mean(MBA01, na.rm = T),
#   MBA0GD020 = mean(MBA01GD020, na.rm = T),
#   MBA0GD040 = mean(MBA01GD040, na.rm = T),
#   MBA0GD070 = mean(MBA01GD070, na.rm = T),
#   MBA0GD080 = mean(MBA01GD080, na.rm = T),
#   TIT1 = mean(TIT1, na.rm = T),
#   TIT2 = mean(TIT2, na.rm = T),
#   TOP = mean(TOP, na.rm = T),
#   X.NA. = mean(X.NA., na.rm = T)
# )
# Output files in csv
write.csv(data_pc_5min, "./data/data_pc_5min.csv")
write.csv(data_pc_hourly, "./data/data_pc_hourly.csv")
write.csv(data_pc_daily, "./data/data_pc_daily.csv")
write.csv(per_5min, "./data/per_5min.csv")
write.csv(per_hour, "./data/per_hour.csv")
write.csv(per_day, "./data/per_day.csv")
View(daily)
five_min = read_csv("./data/five_min.csv")
hourly = read_csv("./data/hourly.csv")
daily = read_csv("./data/daily.csv")
View(daily)
View(five_min)
View(hourly)
daily <- daily %>% select(-c("X1","index"))
View(daily)
write.csv(daily, "./data/daily.csv")
five_min <- five_min %>% select(-c("X1","index"))
# Output files in csv
write.csv(five_min, "./data/five_min.csv")
hourly <- hourly %>% select(-c("X1","index"))
write.csv(hourly, "./data/hourly.csv")
five_min = read_csv("./data/five_min.csv")
hourly = read_csv("./data/hourly.csv")
daily = read_csv("./data/daily.csv")
View(daily)
View(five_min)
data_pc_5min = five_min %>% spread(MsureGr_lvl, Value)
data_pc_hourly = hourly %>% spread(MsureGr_lvl, Value)
data_pc_daily = daily %>% spread(MsureGr_lvl, Value)
data_pc_5min = rename(data_pc_5min,
H11 = "11H",
H2 = "2H",
H5 = "5H",
H8 = "8H",
End_Face = "End Face"
)
data_pc_hourly = rename(data_pc_hourly,
H11 = "11H",
H2 = "2H",
H5 = "5H",
H8 = "8H",
End_Face = "End Face"
)
data_pc_daily = rename(data_pc_daily,
H11 = "11H",
H2 = "2H",
H5 = "5H",
H8 = "8H",
End_Face = "End Face"
)
# Prepare data for Parallel coordinates plot (FunSys_item)
per_day = group_by(data_pc_daily, date, FunSys_item) %>% summarize(
H11 = mean(H11, na.rm = T),
H2 = mean(H2, na.rm = T),
H5 = mean(H5, na.rm = T),
H8 = mean(H8, na.rm = T),
AP1 = mean(AP1, na.rm = T),
DISK11 = mean(DISK11, na.rm = T),
DISK12 = mean(DISK12, na.rm = T),
End_Face = mean(End_Face, na.rm = T),
HP1 = mean(HP1, na.rm = T),
HPCLR_1 = mean(HPCLR_1, na.rm = T),
HPCLR_2 = mean(HPCLR_2, na.rm = T),
HPCLR_3 = mean(HPCLR_3, na.rm = T),
L = mean(L, na.rm = T),
L1 = mean(L1, na.rm = T),
L2 = mean(L2, na.rm = T),
L2oo3 = mean(L2oo3, na.rm = T),
MBH40GD010 = mean(MBH40GD010, na.rm = T),
R = mean(R, na.rm = T),
T1 = mean(T1, na.rm = T),
T3 = mean(T3, na.rm = T)
)
per_hour = group_by(data_pc_hourly, date, FunSys_item) %>% summarize(
H11 = mean(H11, na.rm = T),
H2 = mean(H2, na.rm = T),
H5 = mean(H5, na.rm = T),
H8 = mean(H8, na.rm = T),
AP1 = mean(AP1, na.rm = T),
DISK11 = mean(DISK11, na.rm = T),
DISK12 = mean(DISK12, na.rm = T),
End_Face = mean(End_Face, na.rm = T),
HP1 = mean(HP1, na.rm = T),
HPCLR_1 = mean(HPCLR_1, na.rm = T),
HPCLR_2 = mean(HPCLR_2, na.rm = T),
HPCLR_3 = mean(HPCLR_3, na.rm = T),
L = mean(L, na.rm = T),
L1 = mean(L1, na.rm = T),
L2 = mean(L2, na.rm = T),
L2oo3 = mean(L2oo3, na.rm = T),
MBH40GD010 = mean(MBH40GD010, na.rm = T),
R = mean(R, na.rm = T),
T1 = mean(T1, na.rm = T),
T3 = mean(T3, na.rm = T)
)
per_5min = group_by(data_pc_5min, date, FunSys_item) %>% summarize(
H11 = mean(H11, na.rm = T),
H2 = mean(H2, na.rm = T),
H5 = mean(H5, na.rm = T),
H8 = mean(H8, na.rm = T),
AP1 = mean(AP1, na.rm = T),
DISK11 = mean(DISK11, na.rm = T),
DISK12 = mean(DISK12, na.rm = T),
End_Face = mean(End_Face, na.rm = T),
HP1 = mean(HP1, na.rm = T),
HPCLR_1 = mean(HPCLR_1, na.rm = T),
HPCLR_2 = mean(HPCLR_2, na.rm = T),
HPCLR_3 = mean(HPCLR_3, na.rm = T),
L = mean(L, na.rm = T),
L1 = mean(L1, na.rm = T),
L2 = mean(L2, na.rm = T),
L2oo3 = mean(L2oo3, na.rm = T),
MBH40GD010 = mean(MBH40GD010, na.rm = T),
R = mean(R, na.rm = T),
T1 = mean(T1, na.rm = T),
T3 = mean(T3, na.rm = T)
)
# Create a column in running order for each func_sys_item
per_5min <- per_5min %>% group_by(FunSys_item) %>% mutate(id=row_number())
per_hour <- per_hour %>% group_by(FunSys_item) %>% mutate(id=row_number())
per_day <- per_day %>% group_by(FunSys_item) %>% mutate(id=row_number())
# # Prepare data for Parallel coordinates plot (FunSys_item)
# per_day = group_by(data_pc_daily, date, FunSys_item) %>% summarize(
#   X1_ave = mean(X1_ave, na.rm = T),
#   X1_DC = mean(X1_DC, na.rm = T),
#   X1_max = mean(X1_max, na.rm = T),
#   X1_min = mean(X1_min, na.rm = T),
#   X2_ave = mean(X2_ave, na.rm = T),
#   X2_DC = mean(X2_DC, na.rm = T),
#   X2_R1_ave = mean(X2_R1_ave, na.rm = T),
#   X2_R1_max = mean(X2_R1_max, na.rm = T),
#   X2_R2_ave = mean(X2_R2_ave, na.rm = T),
#   X2_R2_max = mean(X2_R2_max, na.rm = T),
#   X2_R3_ave = mean(X2_R3_ave, na.rm = T),
#   X2_R3_max = mean(X2_R3_max, na.rm = T),
#   BOT = mean(BOT, na.rm = T),
#   MBA01 = mean(MBA01, na.rm = T),
#   MBA0GD020 = mean(MBA01GD020, na.rm = T),
#   MBA0GD040 = mean(MBA01GD040, na.rm = T),
#   MBA0GD070 = mean(MBA01GD070, na.rm = T),
#   MBA0GD080 = mean(MBA01GD080, na.rm = T),
#   TIT1 = mean(TIT1, na.rm = T),
#   TIT2 = mean(TIT2, na.rm = T),
#   TOP = mean(TOP, na.rm = T),
#   X.NA. = mean(X.NA., na.rm = T)
# )
#
# per_hour = group_by(data_pc_hourly, date, FunSys_item) %>% summarize(
#   X1_ave = mean(X1_ave, na.rm = T),
#   X1_DC = mean(X1_DC, na.rm = T),
#   X1_max = mean(X1_max, na.rm = T),
#   X1_min = mean(X1_min, na.rm = T),
#   X2_ave = mean(X2_ave, na.rm = T),
#   X2_DC = mean(X2_DC, na.rm = T),
#   X2_R1_ave = mean(X2_R1_ave, na.rm = T),
#   X2_R1_max = mean(X2_R1_max, na.rm = T),
#   X2_R2_ave = mean(X2_R2_ave, na.rm = T),
#   X2_R2_max = mean(X2_R2_max, na.rm = T),
#   X2_R3_ave = mean(X2_R3_ave, na.rm = T),
#   X2_R3_max = mean(X2_R3_max, na.rm = T),
#   BOT = mean(BOT, na.rm = T),
#   MBA01 = mean(MBA01, na.rm = T),
#   MBA0GD020 = mean(MBA01GD020, na.rm = T),
#   MBA0GD040 = mean(MBA01GD040, na.rm = T),
#   MBA0GD070 = mean(MBA01GD070, na.rm = T),
#   MBA0GD080 = mean(MBA01GD080, na.rm = T),
#   TIT1 = mean(TIT1, na.rm = T),
#   TIT2 = mean(TIT2, na.rm = T),
#   TOP = mean(TOP, na.rm = T),
#   X.NA. = mean(X.NA., na.rm = T)
# )
#
# per_5min = group_by(data_pc_5min, date, FunSys_item) %>% summarize(
#   X1_ave = mean(X1_ave, na.rm = T),
#   X1_DC = mean(X1_DC, na.rm = T),
#   X1_max = mean(X1_max, na.rm = T),
#   X1_min = mean(X1_min, na.rm = T),
#   X2_ave = mean(X2_ave, na.rm = T),
#   X2_DC = mean(X2_DC, na.rm = T),
#   X2_R1_ave = mean(X2_R1_ave, na.rm = T),
#   X2_R1_max = mean(X2_R1_max, na.rm = T),
#   X2_R2_ave = mean(X2_R2_ave, na.rm = T),
#   X2_R2_max = mean(X2_R2_max, na.rm = T),
#   X2_R3_ave = mean(X2_R3_ave, na.rm = T),
#   X2_R3_max = mean(X2_R3_max, na.rm = T),
#   BOT = mean(BOT, na.rm = T),
#   MBA01 = mean(MBA01, na.rm = T),
#   MBA0GD020 = mean(MBA01GD020, na.rm = T),
#   MBA0GD040 = mean(MBA01GD040, na.rm = T),
#   MBA0GD070 = mean(MBA01GD070, na.rm = T),
#   MBA0GD080 = mean(MBA01GD080, na.rm = T),
#   TIT1 = mean(TIT1, na.rm = T),
#   TIT2 = mean(TIT2, na.rm = T),
#   TOP = mean(TOP, na.rm = T),
#   X.NA. = mean(X.NA., na.rm = T)
# )
# Output files in csv
write.csv(data_pc_5min, "./data/data_pc_5min.csv")
write.csv(data_pc_hourly, "./data/data_pc_hourly.csv")
write.csv(data_pc_daily, "./data/data_pc_daily.csv")
write.csv(per_5min, "./data/per_5min.csv")
write.csv(per_hour, "./data/per_hour.csv")
write.csv(per_day, "./data/per_day.csv")
View(daily)
View(per_day)
runApp()
View(per_hour)
runApp()
data_pc_5min <- read.csv("./data/data_pc_5min.csv")
data_pc_hourly <- read.csv("./data/data_pc_hourly.csv")
data_pc_daily <- read.csv("./data/data_pc_daily.csv")
per_5min <- read.csv("./data/per_5min.csv")
per_hour <- read_csv("./data/per_hour.csv")
per_day <- read_csv("./data/per_day.csv")
View(per_day)
packages <- c('tidyverse',
'data.table',
'plotly',
'openair',
'cdparcoord')
for (p in packages) {
if(!require(p, character.only = T)) {
install.packages(p)
}
library(p, character.only = T)
}
Sys.setenv("plotly_username"="oracle83")
Sys.setenv("plotly_api_key"="TrScmb7SsmrT0IoTWOGH")
runApp()
### 2. cdparcoord: Plotting Parallel Coordinates
discparcoord(per_day)
### 2. cdparcoord: Plotting Parallel Coordinates
discparcoord(per_day,k=-10)
View(per_hour)
packages <- c('tidyverse',
'data.table',
'plotly',
'openair',
'GGally')
for (p in packages) {
if(!require(p, character.only = T)) {
install.packages(p)
}
library(p, character.only = T)
}
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour)
View(per_hour)
per_hour %>% filter(FunSys_item==40)
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>% filter(FunSys_item==40))
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")))
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 4:8)
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 4:8,
groupColumn = "id")
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 4:20,
groupColumn = "id")
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 3:20,
groupColumn = "id")
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 4:20,
groupColumn = "id")
### 2. GGally: Plotting Parallel Coordinates
ggparcoord(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 6:20,
groupColumn = "id")
packages <- c('tidyverse',
'data.table',
'plotly',
'openair',
'GGally',
'iplots')
for (p in packages) {
if(!require(p, character.only = T)) {
install.packages(p)
}
library(p, character.only = T)
}
### 3. iplots: Plotting Parallel Coordinates
ipcp(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 6:20,
groupColumn = "id")
parcoords::parcoords(per_hour[c(1, 2, 9:12)], rownames = FALSE,
reorder = TRUE, brushMode="1D",
color = list(
colorScale = htmlwidgets::JS('d3.scale.category10()'),
colorBy = "id"))
packages <- c('tidyverse',
'data.table',
'plotly',
'openair',
'GGally',
'parcoords')
for (p in packages) {
if(!require(p, character.only = T)) {
install.packages(p)
}
library(p, character.only = T)
}
parcoords::parcoords(per_hour[c(1, 2, 9:12)], rownames = FALSE,
reorder = TRUE, brushMode="1D",
color = list(
colorScale = htmlwidgets::JS('d3.scale.category10()'),
colorBy = "id"))
### 3. parcoords: Plotting Parallel Coordinates
parcoords(per_hour[c(1, 2, 9:12)], rownames = FALSE,
reorder = TRUE, brushMode="1D",
color = list(
colorScale = htmlwidgets::JS('d3.scale.category10()'),
colorBy = "id"))
packages <- c('tidyverse',
'data.table',
'plotly',
'openair',
'GGally',
'parcoords',
'lattice')
for (p in packages) {
if(!require(p, character.only = T)) {
install.packages(p)
}
library(p, character.only = T)
}
parallelplot(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 6:20,
groupColumn = "id"))
parallelplot(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date")),
columns = 6:20,
groupColumn = "id")
parcoords(per_hour[c(1, 2, 9:12)], rownames = FALSE,
reorder = TRUE, brushMode="1D",
color = list(
colorScale = htmlwidgets::JS('d3.scale.category10()'),
colorBy = "id"))
### 3. parcoords: Plotting Parallel Coordinates
parcoords(per_hour, rownames = FALSE,
reorder = TRUE, brushMode="1D",
color = list(
colorScale = htmlwidgets::JS('d3.scale.category10()'),
colorBy = "id"))
View(per_hour)
packages <- c('tidyverse',
'data.table',
'plotly',
'openair',
'GGally',
'cdparcoord')
for (p in packages) {
if(!require(p, character.only = T)) {
install.packages(p)
}
library(p, character.only = T)
}
### 3. cdparcoord: Plotting Parallel Coordinates
wb <- discretize(per_hour,nlevels=5)
View(wb)
discparcoord(wb, k=-10)
discparcoord(per_hour, k=-10)
### 3. cdparcoord: Plotting Parallel Coordinates
wb <- discretize(per_hour,nlevels=10)
discparcoord(wb)
View(wb)
### 3. cdparcoord: Plotting Parallel Coordinates
wb <- discretize(per_hour,nlevels=5)
discparcoord(wb)
### 3. cdparcoord: Plotting Parallel Coordinates
wb <- discretize(per_hour %>% filter(FunSys_item==40) %>% select(-c("date")),nlevels=5)
discparcoord(wb)
### 3. cdparcoord: Plotting Parallel Coordinates
wb <- discretize(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date","FunSys_item","H11","H2","H5","H8","L","R","T1","T3")),
nlevels=5)
discparcoord(wb)
discparcoord(wb,k=1)
discparcoord(wb,k=-1)
?discparcoord
discparcoord(wb,k=-5)
discparcoord(wb,
k=-5,
interactive = True)
discparcoord(wb,
k=-5)
### 3. cdparcoord: Plotting Parallel Coordinates
wb <- discretize(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date","FunSys_item","H11","H2","H5","H8","L","R","T1","T3")),
nlevels=10)
discparcoord(wb,
k=-3)
discparcoord(wb)
discparcoord(wb,k=1)
discparcoord(wb,k=2)
discparcoord(wb,k=-1)
discparcoord(wb,k=-3)
discparcoord(wb,
k=-10.
saveCounts=FALSE)
discparcoord(wb,
k = -10,
saveCounts=FALSE)
View(wb)
View(wb)
### 3. cdparcoord: Plotting Parallel Coordinates
wb <- discretize(per_hour %>%
filter(FunSys_item==40) %>%
select(-c("date","FunSys_item","H11","H2","H5","H8","L","R","T1","T3","X1","id")),
nlevels=10)
View(wb)
discparcoord(wb,
k = -10,
saveCounts=FALSE)
?plotly
runApp()
runApp()
runApp()
View(data_pc_daily)
View(per_hour)
runApp()
View(per_hour)
